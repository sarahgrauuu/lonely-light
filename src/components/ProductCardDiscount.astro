---
const {
  imgPath,
  staricon,
  name1,
  name2,
  bestseller,
  discount,
  nyhed,
  status,
  shipping,
  currentprice,
  originalprice,
  type,
} = Astro.props;

import Ctabutton from "./Ctabutton.astro";
---

<article>
  <a class="card" href="">
    <div class="topcarditems">
      <svg
        width="32"
        height="31"
        viewBox="0 0 32 31"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
      >
        <ellipse cx="16" cy="15.5001" rx="16" ry="15.3846" fill="#D9D9D9"
        ></ellipse>
        <path
          d="M16.0281 25.3514L14.6896 24.0234C9.93579 19.325 6.79733 16.2263 6.79733 12.4233C6.79733 9.3246 9.03118 6.88989 11.8743 6.88989C13.4804 6.88989 15.0219 8.06365 16.0281 9.35143C17.0343 8.06365 18.5758 6.88989 20.1819 6.88989C23.025 6.88989 25.2589 9.3246 25.2589 12.4233C25.2589 16.2263 22.1204 19.325 17.3666 24.0335L16.0281 25.3514Z"
          fill="#FCF9F9"></path>
      </svg>

      <div class="discountprc">
        <p class="roboto">{discount}</p>
      </div>
    </div>

    <img class="itemImg" src={imgPath} alt="" />
    <div class="intemInfo">
      <p class="name1 roboto">{name1}</p>

      <p class="name2 roboto">{name2}</p>

      <div class="itemstatus">
        <p class="roboto">
          <span id="stats">{status}</span>

          <span id="shpmnt"> {shipping}</span>
        </p>
      </div>
      <div class="pricing">
        <p class="roboto">
          DKK <span class="pricedicounted">{currentprice}</span>
        </p>
        <p class="roboto">DKK <span class="priceorg">{originalprice}</span></p>
      </div>
    </div>
    <Ctabutton class="ctabtn" variant="remindme" type="productcard">
      <p class="ctabuttontext">{type}</p>
    </Ctabutton>
  </a>
</article>

<style>
  a.card {
    display: grid;
    grid-template-rows: repeat(4);
  }

  article {
    min-width: var(--sdWidth200);
    max-width: 320px;
    border: var(--sdBwidth1) solid;
    border-color: var(--sdGrey400);
    border-radius: var(--sdBorderRadius3);
    padding: var(--sdSpacing5);
    position: relative;
  }
  img.itemImg {
    width: 99%;
    grid-row: 1/3;
    z-index: 0;
  }
  .topcarditems {
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    position: absolute;
    z-index: 1;
    width: 97%;
    align-items: center;
  }
  .star {
    scale: 1.3;
  }

  svg :hover {
    fill: var(--sdYellow2);
  }

  .discountprc {
    display: grid;
    font-size: var(--sdFontSize0);
    color: var(--sdWhite);
    background-color: var(--sdRed);
    padding-left: 10px;
    padding-right: 10px;
    height: 40px;
    align-items: center;
  }

  .name {
    size: var(--sdFontSize4);
    font-weight: var(--sdFontWeightsRobotoMedium);
    color: red;
  }

  .name1,
  .name2 {
    margin-top: 5px;
    margin-bottom: 5px;
    color: var(--sdBlack);
    font-size: var(--sdFontSize2);
    font-weight: var(--sdFontWeightsRobotoMedium);
  }

  .name2 {
    margin-bottom: 33px;
  }

  .itemstatus {
    margin-top: var(--sdSpacing20);
  }

  #stats {
    font-size: var(--sdFontSize0);
    color: var(--sdRed);
    font-weight: 700;
  }

  #shpmnt {
    font-size: var(--sdFontSize0);
    color: var(--sdGrey600);
  }

  .pricing {
    display: flex;
    flex-direction: row;
    align-items: flex-start;
    gap: var(--sdSpacing110);
    margin-top: var(--sdSpacing20);
    margin-bottom: var(--sdSpacing10);
  }

  .pricing > p:nth-child(1) {
    color: var(--sdItemSpecialTextRed);
    font-weight: var(--sdFontWeightsRobotoMedium);
    font-size: var(--sdFontSize4);
  }

  .pricing > p:nth-child(2) {
    text-decoration: line-through;
    font-size: var(--sdFontSize4);
    color: var(--sdGrey600);
  }

  .priceorg {
    font-weight: var(--sdFontWeightsRobotoBlack);
  }

  .pricedicounted {
    font-weight: var(--sdFontWeightsRobotoBlack);
  }

  .ctabtn {
    display: block;
    margin: auto;
  }

  p {
    margin-top: var(--sdSpacing5);
    margin-bottom: var(--sdSpacing5);
  }

  p.ctabuttontext {
    font-weight: var(--sdFontWeightsRobotoBlack);
  }
</style>
